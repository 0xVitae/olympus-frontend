/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface OlympusGivingInterface extends ethers.utils.Interface {
  functions: {
    "DECIMALS()": FunctionFragment;
    "deposit(uint256,address)": FunctionFragment;
    "disableDeposits()": FunctionFragment;
    "disableRedeems()": FunctionFragment;
    "disableWithdaws()": FunctionFragment;
    "donationInfo(address,uint256)": FunctionFragment;
    "donationsTo(address)": FunctionFragment;
    "emergencyShutdown(bool)": FunctionFragment;
    "owner()": FunctionFragment;
    "recipientInfo(address)": FunctionFragment;
    "redeem()": FunctionFragment;
    "redeemableBalance(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sOHM()": FunctionFragment;
    "shutdownDeposits(bool)": FunctionFragment;
    "shutdownRedeems(bool)": FunctionFragment;
    "shutdownWithdrawals(bool)": FunctionFragment;
    "totalDonations()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DECIMALS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "disableDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableRedeems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableWithdaws",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donationInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "donationsTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "emergencyShutdown",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recipientInfo",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "redeem", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemableBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sOHM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "shutdownDeposits",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "shutdownRedeems",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "shutdownWithdrawals",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDonations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "DECIMALS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableRedeems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableWithdaws",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationsTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recipientInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sOHM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shutdownDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shutdownRedeems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shutdownWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDonations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "AllWithdrawn(address,uint256)": EventFragment;
    "Deposited(address,address,uint256)": EventFragment;
    "EmergencyShutdown(bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Redeemed(address,uint256)": EventFragment;
    "Withdrawn(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyShutdown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type AllWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  { _donor: string; _amount: BigNumber }
>;

export type AllWithdrawnEventFilter = TypedEventFilter<AllWithdrawnEvent>;

export type DepositedEvent = TypedEvent<
  [string, string, BigNumber],
  { _donor: string; _recipient: string; _amount: BigNumber }
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export type EmergencyShutdownEvent = TypedEvent<[boolean], { active: boolean }>;

export type EmergencyShutdownEventFilter =
  TypedEventFilter<EmergencyShutdownEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RedeemedEvent = TypedEvent<
  [string, BigNumber],
  { _recipient: string; _amount: BigNumber }
>;

export type RedeemedEventFilter = TypedEventFilter<RedeemedEvent>;

export type WithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  { _donor: string; _recipient: string; _amount: BigNumber }
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface OlympusGiving extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OlympusGivingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _amount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableDeposits(overrides?: CallOverrides): Promise<[boolean]>;

    disableRedeems(overrides?: CallOverrides): Promise<[boolean]>;

    disableWithdaws(overrides?: CallOverrides): Promise<[boolean]>;

    donationInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { recipient: string; amount: BigNumber }>;

    donationsTo(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    emergencyShutdown(
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recipientInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalDebt: BigNumber;
        carry: BigNumber;
        agnosticAmount: BigNumber;
        indexAtLastChange: BigNumber;
      }
    >;

    redeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemableBalance(
      _who: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sOHM(overrides?: CallOverrides): Promise<[string]>;

    shutdownDeposits(
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shutdownRedeems(
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shutdownWithdrawals(
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalDonations(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _amount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _amount: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableDeposits(overrides?: CallOverrides): Promise<boolean>;

  disableRedeems(overrides?: CallOverrides): Promise<boolean>;

  disableWithdaws(overrides?: CallOverrides): Promise<boolean>;

  donationInfo(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { recipient: string; amount: BigNumber }>;

  donationsTo(
    _recipient: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  emergencyShutdown(
    _active: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  recipientInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalDebt: BigNumber;
      carry: BigNumber;
      agnosticAmount: BigNumber;
      indexAtLastChange: BigNumber;
    }
  >;

  redeem(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemableBalance(
    _who: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sOHM(overrides?: CallOverrides): Promise<string>;

  shutdownDeposits(
    _active: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shutdownRedeems(
    _active: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shutdownWithdrawals(
    _active: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalDonations(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _amount: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    disableDeposits(overrides?: CallOverrides): Promise<boolean>;

    disableRedeems(overrides?: CallOverrides): Promise<boolean>;

    disableWithdaws(overrides?: CallOverrides): Promise<boolean>;

    donationInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { recipient: string; amount: BigNumber }>;

    donationsTo(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyShutdown(
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    recipientInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalDebt: BigNumber;
        carry: BigNumber;
        agnosticAmount: BigNumber;
        indexAtLastChange: BigNumber;
      }
    >;

    redeem(overrides?: CallOverrides): Promise<void>;

    redeemableBalance(
      _who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sOHM(overrides?: CallOverrides): Promise<string>;

    shutdownDeposits(
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    shutdownRedeems(_active: boolean, overrides?: CallOverrides): Promise<void>;

    shutdownWithdrawals(
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    totalDonations(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _amount: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AllWithdrawn(address,uint256)"(
      _donor?: null,
      _amount?: null
    ): AllWithdrawnEventFilter;
    AllWithdrawn(_donor?: null, _amount?: null): AllWithdrawnEventFilter;

    "Deposited(address,address,uint256)"(
      _donor?: null,
      _recipient?: null,
      _amount?: null
    ): DepositedEventFilter;
    Deposited(
      _donor?: null,
      _recipient?: null,
      _amount?: null
    ): DepositedEventFilter;

    "EmergencyShutdown(bool)"(active?: null): EmergencyShutdownEventFilter;
    EmergencyShutdown(active?: null): EmergencyShutdownEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Redeemed(address,uint256)"(
      _recipient?: null,
      _amount?: null
    ): RedeemedEventFilter;
    Redeemed(_recipient?: null, _amount?: null): RedeemedEventFilter;

    "Withdrawn(address,address,uint256)"(
      _donor?: null,
      _recipient?: null,
      _amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      _donor?: null,
      _recipient?: null,
      _amount?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    disableRedeems(overrides?: CallOverrides): Promise<BigNumber>;

    disableWithdaws(overrides?: CallOverrides): Promise<BigNumber>;

    donationInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donationsTo(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyShutdown(
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recipientInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemableBalance(
      _who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sOHM(overrides?: CallOverrides): Promise<BigNumber>;

    shutdownDeposits(
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shutdownRedeems(
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shutdownWithdrawals(
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalDonations(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableRedeems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableWithdaws(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    donationInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donationsTo(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyShutdown(
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recipientInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemableBalance(
      _who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sOHM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shutdownDeposits(
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shutdownRedeems(
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shutdownWithdrawals(
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalDonations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
